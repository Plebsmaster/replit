"use client"

import { useState, useRef, useEffect } from "react"
import { SlideContainer } from "@/components/ui/slide-container"
import { getTypographyClasses } from "@/lib/typography"
import type { StepProps } from "@/lib/form/steps"

type Props = StepProps & {}

type LogoMeta = {
  name: string
  sizeBytes: number
  ext: ".pdf" | ".ai" | ".eps"
}

const ACCEPT_EXTS = [".pdf", ".ai", ".eps"] as const
const ACCEPT_STRING = ACCEPT_EXTS.join(",")

function getExt(name: string): string {
  const dot = name.lastIndexOf(".")
  return dot >= 0 ? name.slice(dot).toLowerCase() : ""
}

export default function Slide22({ updateFormData, formData }: Props) {
  const initial = formData?.logoUpload as LogoMeta | undefined
  const [uploadedFile, setUploadedFile] = useState<LogoMeta | null>(initial ?? null)
  const [isDragOver, setIsDragOver] = useState(false)
  const fileInputRef = useRef<HTMLInputElement>(null)

  useEffect(() => {
    // keep global form state in sync
    if (uploadedFile) {
      updateFormData({ logoUpload: uploadedFile })
      try {
        localStorage.setItem("salonid:logoFile", uploadedFile.name)
        localStorage.setItem("salonid:dateISO", new Date().toISOString())
      } catch {}
    } else {
      updateFormData({ logoUpload: undefined })
    }
  }, [uploadedFile, updateFormData])

  const handleFileSelect = (file: File) => {
    const ext = getExt(file.name)
    const isAccepted = (ACCEPT_EXTS as readonly string[]).includes(ext)

    if (!isAccepted) {
      alert("Alleen PDF, AI en EPS bestanden zijn toegestaan.")
      return
    }

    setUploadedFile({
      name: file.name,
      sizeBytes: file.size,
      ext: ext as LogoMeta["ext"],
    })
  }

  const onDrop = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragOver(false)
    const files = e.dataTransfer.files
    if (files && files.length > 0) handleFileSelect(files[0])
  }

  const onDragOver = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragOver(true)
  }

  const onDragLeave = (e: React.DragEvent) => {
    e.preventDefault()
    setIsDragOver(false)
  }

  const onClickPicker = () => fileInputRef.current?.click()

  const onInputChange = (e: React.ChangeEvent<HTMLInputElement>) => {
    const f = e.target.files?.[0]
    if (f) handleFileSelect(f)
  }

  return (
    <SlideContainer width="wide">
      <section>
        <h2 className={getTypographyClasses("title", { alignment: "left" })}>Logo</h2>

        <div className="max-w-[760px] space-y-4 mb-8">
          <p className={getTypographyClasses("paragraph", { alignment: "left" })}>
            Voor de beste resultaten met onze druktechnieken, verzoeken wij je om je logo aan te leveren in een
            van de volgende professionele ontwerpformaten: PDF, AI of EPS. <strong>JPG/PNG worden niet verwerkt.</strong>
          </p>
          <p className={getTypographyClasses("paragraph", { alignment: "left" })}>
            Mochten er aanpassingen nodig zijn om je logo optimaal te integreren met onze technieken, dan nemen
            wij contact met je op. Zo zorgen we dat het eindresultaat volledig aan je verwachtingen voldoet.
          </p>
        </div>

        <div className="max-w-[600px] mb-8">
          <div
            className={`border-2 border-dashed rounded-xl p-12 text-center cursor-pointer transition-all ${
              isDragOver
                ? "border-black bg-gray-50"
                : uploadedFile
                ? "border-green-500 bg-green-50"
                : "border-gray-300 hover:border-gray-400 hover:bg-gray-50"
            }`}
            onDrop={onDrop}
            onDragOver={onDragOver}
            onDragLeave={onDragLeave}
            onClick={onClickPicker}
            role="button"
            aria-label="Upload je logo (PDF, AI, EPS)"
            tabIndex={0}
            onKeyDown={(e) => (e.key === "Enter" || e.key === " ") && onClickPicker()}
          >
            <input
              ref={fileInputRef}
              type="file"
              accept={ACCEPT_STRING}
              onChange={onInputChange}
              className="hidden"
            />

            {uploadedFile ? (
              <div className="space-y-3">
                <div className="w-16 h-16 mx-auto bg-green-100 rounded-full flex items-center justify-center">
                  <svg className="w-8 h-8 text-green-600" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M5 13l4 4L19 7" />
                  </svg>
                </div>
                <div>
                  <p className="font-semibold text-gray-900">{uploadedFile.name}</p>
                  <p className="text-sm text-gray-600">
                    {(uploadedFile.sizeBytes / 1024 / 1024).toFixed(2)} MB
                  </p>
                </div>
                <p className="text-sm text-green-600">Bestand succesvol ge√ºpload!</p>
              </div>
            ) : (
              <div className="space-y-3">
                <div className="w-16 h-16 mx-auto bg-gray-100 rounded-full flex items-center justify-center">
                  <svg className="w-8 h-8 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M7 16a4 4 0 01-.88-7.903A5 5 0 1115.9 6L16 6a5 5 0 011 9.9M15 13l-3-3m0 0l-3 3m3-3v12" />
                  </svg>
                </div>
                <div>
                  <p className="font-semibold text-gray-900 mb-2">
                    Klik hier, of sleep je bestanden hierheen om ze te uploaden.
                  </p>
                  <p className="text-sm text-gray-600">AI, EPS, PDF</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </section>
    </SlideContainer>
  )
}
