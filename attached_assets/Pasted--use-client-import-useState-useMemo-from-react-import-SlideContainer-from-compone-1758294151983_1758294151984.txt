"use client"

import { useState, useMemo } from "react"
import { SlideContainer } from "@/components/ui/slide-container"
import { getTypographyClasses } from "@/lib/typography"
import type { StepProps } from "@/lib/form/steps"

type NoYellowNaming = {
  noYellowShampoo?: string
  noYellowConditioner?: string
}

type Props = StepProps & {}

const productOptions: Record<string, string[]> = {
  "No Yellow Shampoo": [
    "No Yellow Shampoo",
    "Anti-Yellow Shampoo",
    "Goodbye Yellow Shampoo",
    "Silver Shampoo",
    "Cool Blonde Shampoo",
  ],
  "No Yellow Conditioner": [
    "No Yellow Conditioner",
    "Anti-Yellow Conditioner",
    "Goodbye Yellow Conditioner",
    "Silver Conditioner",
    "Cool Blonde Conditioner",
  ],
}

// Map UI labels to normalized keys we store in formData
const normalizeKey = (productType: string): keyof NoYellowNaming =>
  productType === "No Yellow Conditioner" ? "noYellowConditioner" : "noYellowShampoo"

export default function Slide17({ updateFormData, formData }: Props) {
  // Prefill from global formData (if returning to this slide)
  const initial: NoYellowNaming = (formData?.noYellowNaming as NoYellowNaming) ?? {
    noYellowShampoo: "No Yellow Shampoo",
    noYellowConditioner: "No Yellow Conditioner",
  }

  const [selectedChoices, setSelectedChoices] = useState<Record<string, string>>({
    "No Yellow Shampoo": initial.noYellowShampoo ?? "No Yellow Shampoo",
    "No Yellow Conditioner": initial.noYellowConditioner ?? "No Yellow Conditioner",
  })

  const productTypes = useMemo(() => Object.keys(productOptions), [])

  const handleOptionSelect = (productType: string, choice: string) => {
    const normalized = normalizeKey(productType)

    setSelectedChoices(prev => ({ ...prev, [productType]: choice }))

    // Persist normalized structure into the global form state
    updateFormData({
      noYellowNaming: {
        ...(formData?.noYellowNaming as NoYellowNaming),
        [normalized]: choice,
      },
    })

    // Optional: keep your localStorage behavior
    try {
      localStorage.setItem(`salonid:${productType}Choice`, choice)
      localStorage.setItem("salonid:dateISO", new Date().toISOString())
    } catch {}
  }

  return (
    <SlideContainer width="wide">
      <section>
        <h2 className={getTypographyClasses("title", { alignment: "left" })}>
          No Yellow - Kies de benaming
        </h2>

        <div className="max-w-[760px] space-y-4 mb-8">
          <p className={getTypographyClasses("paragraph", { alignment: "left" })}>
            Er zijn verschillende benamingen die worden gebruikt voor de diverse soorten shampoos en
            conditioners. Maak een keuze uit de selectie hieronder.
          </p>
        </div>

        <div className="space-y-8">
          {productTypes.map((productType) => (
            <div key={productType}>
              <h3 className="text-xl font-bold text-gray-900 text-left mb-4">{productType}</h3>

              <div className="space-y-3 mt-4">
                {productOptions[productType].map((option, index) => {
                  const selected = selectedChoices[productType] === option
                  return (
                    <div
                      key={option}
                      className={`p-3 rounded-lg border cursor-pointer transition-all hover:shadow-sm hover:scale-105 ${
                        selected ? "border-black bg-gray-50" : "border-gray-300 hover:border-gray-400"
                      }`}
                      onClick={() => handleOptionSelect(productType, option)}
                    >
                      <div className="flex justify-between items-center">
                        <span className="text-gray-800">
                          {index + 1}. "{option}"
                        </span>
                        {selected && <div className="w-3 h-3 rounded-full bg-black" />}
                      </div>
                    </div>
                  )
                })}
              </div>
            </div>
          ))}
        </div>
      </section>
    </SlideContainer>
  )
}
